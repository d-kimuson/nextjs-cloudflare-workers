import { notFound } from "next/navigation";
import { MakerProfile } from "../../../../components/makers/MakerProfile";
import { MakerStats } from "../../../../components/makers/MakerStats";
import { Breadcrumb } from "../../../../components/ui/breadcrumb";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "../../../../components/ui/tabs";
import { WorksListWithSort } from "../../../../components/works/WorksListWithSort";
import { getMakerById } from "../../../../server/fetchers/makers";

type MakerPageProps = {
  params: Promise<{
    makerId: string;
  }>;
};

export default async function MakerPage({ params }: MakerPageProps) {
  const { makerId } = await params;

  const maker = await getMakerById(Number.parseInt(makerId, 10));

  if (!maker) {
    notFound();
  }

  // 統計情報を計算
  const totalWorks = maker.works.length;
  const totalReviews = maker.works.reduce((sum, work) => sum + (work.reviewCount || 0), 0);
  const averageRating = totalReviews > 0 
    ? maker.works
        .filter(work => work.reviewAverageScore && work.reviewAverageScore > 0)
        .reduce((sum, work, _, arr) => {
          return sum + (work.reviewAverageScore || 0) / arr.length;
        }, 0)
    : 0;

  const breadcrumbItems = [
    { label: "同人誌", href: "/doujinshi" },
    { label: "制作者一覧", href: "/doujinshi/makers" },
    { label: maker.name }
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="container mx-auto px-4 py-6">
        <div className="space-y-8">
          {/* パンくずナビゲーション */}
          <Breadcrumb items={breadcrumbItems} className="mb-6" />

          {/* 作者プロフィール */}
          <MakerProfile 
            maker={{
              name: maker.name,
              description: maker.description || `${maker.name}は${totalWorks}作品を手がける制作者です。`,
              website: maker.website,
              location: maker.location,
              foundedDate: maker.foundedDate
            }}
          />

          {/* 統計情報 */}
          <MakerStats 
            totalWorks={totalWorks}
            averageRating={averageRating}
            totalReviews={totalReviews}
          />

          {/* 作品一覧セクション */}
          <div className="bg-white rounded-lg shadow-sm">
            <Tabs defaultValue="works" className="w-full">
              <div className="border-b bg-white rounded-t-lg">
                <TabsList className="w-full justify-start h-12 bg-transparent p-0">
                  <TabsTrigger 
                    value="works" 
                    className="data-[state=active]:bg-white data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none h-12 px-6"
                  >
                    作品一覧 ({totalWorks})
                  </TabsTrigger>
                  <TabsTrigger 
                    value="info" 
                    className="data-[state=active]:bg-white data-[state=active]:border-b-2 data-[state=active]:border-blue-500 rounded-none h-12 px-6"
                  >
                    詳細情報
                  </TabsTrigger>
                </TabsList>
              </div>
              
              <TabsContent value="works" className="p-6">
                <WorksListWithSort
                  works={maker.works}
                  layout="grid"
                  emptyMessage="この制作者の作品はまだありません。"
                  showPagination={true}
                />
              </TabsContent>
              
              <TabsContent value="info" className="p-6">
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-900">基本情報</h3>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">制作者名:</span>
                          <span className="font-medium">{maker.name}</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">総作品数:</span>
                          <span className="font-medium">{totalWorks}作品</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">総レビュー数:</span>
                          <span className="font-medium">{totalReviews}件</span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">平均評価:</span>
                          <span className="font-medium">{ averageRating > 0 ? averageRating.toFixed(1) : "未評価" }</span>
                        </div>
                      </div>
                    </div>
                    
                    <div className="space-y-4">
                      <h3 className="text-lg font-semibold text-gray-900">作品傾向</h3>
                      <div className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span className="text-gray-600">最新作品:</span>
                          <span className="font-medium">
                            {maker.works.length > 0 
                              ? new Date(Math.max(...maker.works.map(w => new Date(w.releaseDate).getTime())))
                                  .toLocaleDateString("ja-JP", { year: "numeric", month: "short" })
                              : "なし"
                            }
                          </span>
                        </div>
                        <div className="flex justify-between">
                          <span className="text-gray-600">価格帯:</span>
                          <span className="font-medium">
                            {maker.works.length > 0 
                              ? `¥${Math.min(...maker.works.map(w => w.price)).toLocaleString()} - ¥${Math.max(...maker.works.map(w => w.price)).toLocaleString()}`
                              : "なし"
                            }
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
}

export async function generateMetadata({ params }: MakerPageProps) {
  const { makerId } = await params;

  const maker = await getMakerById(Number.parseInt(makerId, 10));

  if (!maker) {
    return {
      title: "作者が見つかりません",
    };
  }

  return {
    title: `${maker.name} - 制作者詳細 | 同人誌アフィリエイトサイト`,
    description: `${maker.name}の制作者詳細ページ。${maker.works.length}作品を掲載中。作品一覧、統計情報、プロフィールをご覧いただけます。`,
    keywords: `${maker.name}, 制作者, 同人誌, 作品一覧, プロフィール`,
  };
}
