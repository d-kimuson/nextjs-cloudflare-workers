/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * DMM API
 * DMM API methods for IoT devices
 * OpenAPI spec version: 3.0
 */
/**
 * 女優情報
 */
export interface ActressActress {
  /** 女優ID */
  id: number;
  /** 女優名 */
  name: string;
  /** 女優名（読み仮名） */
  ruby: string;
  /** バスト（cm） */
  bust?: number;
  /** カップ数 */
  cup?: string;
  /** ウェスト（cm） */
  waist?: number;
  /** ヒップ（cm） */
  hip?: number;
  /** 身長（cm） */
  height?: number;
  /** 生年月日 */
  birthday?: string;
  /** 血液型 */
  blood_type?: string;
  /** 趣味 */
  hobby?: string;
  /** 出身地 */
  prefectures?: string;
  /** 画像URL情報 */
  imageURL?: ActressActressImageURL;
  /** リストページURL情報（アフィリエイトID付き） */
  listURL?: ActressActressListURL;
}

/**
 * 女優画像URL情報
 */
export interface ActressActressImageURL {
  /** 画像（小）URL */
  small: string;
  /** 画像（大）URL */
  large: string;
}

/**
 * 女優リストページURL情報（アフィリエイトID付き）
 */
export interface ActressActressListURL {
  /** 動画リストページURL */
  digital: string;
  /** 月額動画 見放題chデラックスリストページURL */
  monthly_premium: string;
  /** DVD通販リストページURL */
  mono: string;
}

/**
 * 女優検索レスポンス
 */
export interface ActressActressSearchResponse {
  /** ステータスコード */
  status: number;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** 女優情報リスト */
  actress: ActressActress[];
}

/**
 * 作者情報
 */
export interface AuthorAuthor {
  /** 作者ID */
  author_id: number;
  /** 作者名 */
  name: string;
  /** 作者名（読み仮名） */
  ruby: string;
  /** 作者別名 */
  another_name?: string;
  /** リストページURL（アフィリエイトID付き） */
  list_url: string;
}

/**
 * 作者検索レスポンス
 */
export interface AuthorAuthorSearchResponse {
  /** ステータスコード */
  status: number;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** サイト名 */
  site_name: string;
  /** サイトコード */
  site_code: string;
  /** サービス名 */
  service_name: string;
  /** サービスコード */
  service_code: string;
  /** フロアID */
  floor_id: number;
  /** フロア名 */
  floor_name: string;
  /** フロアコード */
  floor_code: string;
  /** 作者情報リスト */
  author: AuthorAuthor[];
}

export type ErrorResponseBodyRequestParameters = {[key: string]: string};

export type ErrorResponseBodyRequest = {
  parameters: ErrorResponseBodyRequestParameters;
};

export type ErrorResponseBodyResultErrors = {[key: string]: string};

export type ErrorResponseBodyResult = {
  status: number;
  message: string;
  errors: ErrorResponseBodyResultErrors;
};

export interface ErrorResponseBody {
  request: ErrorResponseBodyRequest;
  result: ErrorResponseBodyResult;
}

/**
 * フロア情報
 */
export interface FloorFloor {
  /** フロアID */
  id: number;
  /** フロア名 */
  name: string;
  /** フロアコード */
  code: string;
}

/**
 * フロアリストレスポンス
 */
export interface FloorFloorListResponse {
  /** サイト情報リスト */
  site: FloorSite[];
}

/**
 * サービス情報
 */
export interface FloorService {
  /** サービス名 */
  name: string;
  /** サービスコード */
  code: string;
  /** フロア情報リスト */
  floor: FloorFloor[];
}

/**
 * サイト情報
 */
export interface FloorSite {
  /** サイト名 */
  name: string;
  /** サイトコード */
  code: string;
  /** サービス情報リスト */
  service: FloorService[];
}

/**
 * ジャンル情報
 */
export interface GenreGenre {
  /** ジャンルID */
  genre_id: number;
  /** ジャンル名 */
  name: string;
  /** ジャンル名（読み仮名） */
  ruby: string;
  /** リストページURL（アフィリエイトID付き） */
  list_url: string;
}

/**
 * ジャンル検索レスポンス
 */
export interface GenreGenreSearchResponse {
  /** ステータスコード */
  status: number;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** サイト名 */
  site_name: string;
  /** サイトコード */
  site_code: string;
  /** サービス名 */
  service_name: string;
  /** サービスコード */
  service_code: string;
  /** フロアID */
  floor_id: number;
  /** フロア名 */
  floor_name: string;
  /** フロアコード */
  floor_code: string;
  /** ジャンル情報リスト */
  genre: GenreGenre[];
}

/**
 * 出演者情報（一般作品のみ）
 */
export interface ItemActor {
  /** 出演者名 */
  name: string;
  /** 出演者ID */
  id: number;
}

/**
 * 女優情報（アダルト作品のみ）
 */
export interface ItemActress {
  /** 女優名 */
  name: string;
  /** 女優ID */
  id: number;
}

/**
 * 作家・原作者・著者情報
 */
export interface ItemAuthor {
  /** 作家・原作者・著者名 */
  name: string;
  /** 作家・原作者・著者ID */
  id: number;
}

/**
 * CD情報
 */
export interface ItemCDInfo {
  /** アルバム、シングル */
  kind: string;
}

/**
 * キャンペーン情報
 */
export interface ItemCampaign {
  /** キャンペーン開始日時 */
  date_begin: string;
  /** キャンペーン終了日時 */
  date_end: string;
  /** キャンペーンタイトル */
  title: string;
}

/**
 * カラー情報
 */
export interface ItemColor {
  /** カラー名 */
  name: string;
  /** カラーID */
  id: number;
}

/**
 * 配信情報
 */
export interface ItemDelivery {
  /** 配信タイプ */
  type: string;
  /** 配信価格 */
  price: number;
}

/**
 * 監督情報
 */
export interface ItemDirector {
  /** 監督名 */
  name: string;
  /** 監督ID */
  id: number;
}

/**
 * パンくずリスト情報
 */
export interface ItemDirectory {
  /** パンくずID */
  id: number;
  /** パンくず名 */
  name: string;
}

/**
 * ジャンル情報
 */
export interface ItemGenre {
  /** ジャンル名 */
  name: string;
  /** ジャンルID */
  id: number;
}

/**
 * 画像URL情報
 */
export interface ItemImageURL {
  /** リストページ用画像URL */
  list: string;
  /** 末端用（小）画像URL */
  small: string;
  /** 末端用（大）画像URL */
  large: string;
}

/**
 * 商品情報
 */
export interface ItemItem {
  /** サービスコード */
  service_code: string;
  /** サービス名 */
  service_name: string;
  /** フロアコード */
  floor_code: string;
  /** フロア名 */
  floor_name: string;
  /** カテゴリ名 */
  category_name: string;
  /** 商品ID */
  content_id: string;
  /** 品番 */
  product_id: string;
  /** タイトル */
  title: string;
  /** 収録時間 or ページ数 */
  volume?: number;
  /** 巻数 */
  number?: number;
  /** レビュー情報 */
  review?: ItemReview;
  /** 商品ページURL */
  URL: string;
  /** アフィリエイトリンクURL */
  affiliateURL: string;
  /** 画像URL情報 */
  imageURL?: ItemImageURL;
  /** 立ち読み情報 */
  tachiyomi?: ItemTachiyomi;
  /** サンプル画像URL情報 */
  sampleImageURL?: ItemSampleImageURL;
  /** サンプル動画URL情報 */
  sampleMovieURL?: ItemSampleMovieURL;
  /** 価格情報 */
  prices?: ItemPrices;
  /** 発売日、配信開始日、貸出開始日 */
  date: string;
  /** 商品詳細情報 */
  iteminfo?: ItemItemInfo;
  /** CD情報 */
  cdinfo?: ItemCDInfo;
  /** JANコード */
  jancode?: string;
  /** メーカー品番 */
  maker_product?: string;
  /** ISBN */
  isbn?: string;
  /** 在庫状況 */
  stock?: string;
  /** パンくずリスト */
  directory?: ItemDirectory[];
  /** キャンペーン情報 */
  campaign?: ItemCampaign[];
}

/**
 * 商品詳細情報
 */
export interface ItemItemInfo {
  /** ジャンル情報 */
  genre?: ItemGenre[];
  /** シリーズ情報 */
  series?: ItemSeries[];
  /** メーカー情報 */
  maker?: ItemMaker[];
  /** 出演者情報（一般作品のみ） */
  actor?: ItemActor[];
  /** 女優情報（アダルト作品のみ） */
  actress?: ItemActress[];
  /** 監督情報 */
  director?: ItemDirector[];
  /** 作家・原作者・著者情報 */
  author?: ItemAuthor[];
  /** レーベル情報 */
  label?: ItemLabel[];
  /** タイプ情報 */
  type?: ItemType[];
  /** カラー情報 */
  color?: ItemColor[];
  /** サイズ情報 */
  size?: ItemSize[];
}

/**
 * ステータスコード
 */
export type ItemItemListResultStatus = typeof ItemItemListResultStatus[keyof typeof ItemItemListResultStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemItemListResultStatus = {
  NUMBER_200: 200,
} as const;

/**
 * 商品リスト成功レスポンス
 */
export interface ItemItemListResult {
  /** ステータスコード */
  status: ItemItemListResultStatus;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** 商品情報リスト */
  items: ItemItem[];
}

/**
 * レーベル情報
 */
export interface ItemLabel {
  /** レーベル名 */
  name: string;
  /** レーベルID */
  id: number;
}

/**
 * メーカー情報
 */
export interface ItemMaker {
  /** メーカー名 */
  name: string;
  /** メーカーID */
  id: number;
}

export type ItemPricesDeliveriesItem = {
  /** 配信情報 */
  delivery: ItemDelivery;
};

/**
 * 価格情報
 */
export interface ItemPrices {
  /** 金額 */
  price: string;
  /** 定価 */
  list_price?: string;
  /** 配信リスト */
  deliveries?: ItemPricesDeliveriesItem[];
}

/**
 * レビュー情報
 */
export interface ItemReview {
  /** レビュー数 */
  count: number;
  /** レビュー平均点 */
  average: number;
}

export type ItemSampleImageURLSampleSItem = {
  /** サンプル画像（小）URL */
  image: string;
};

export type ItemSampleImageURLSampleLItem = {
  /** サンプル画像（大）URL */
  image: string;
};

/**
 * サンプル画像URL情報
 */
export interface ItemSampleImageURL {
  /** サンプル（小）画像リスト */
  sample_s: ItemSampleImageURLSampleSItem[];
  /** サンプル（大）画像リスト */
  sample_l: ItemSampleImageURLSampleLItem[];
}

/**
 * サンプル動画URL情報
 */
export interface ItemSampleMovieURL {
  /** 476×306サイズ動画URL */
  size_476_306?: string;
  /** 560×360サイズ動画URL */
  size_560_360?: string;
  /** 644×414サイズ動画URL */
  size_644_414?: string;
  /** 720×480サイズ動画URL */
  size_720_480?: string;
  /** PC対応フラグ（1: 対応、0: 非対応） */
  pc_flag: number;
  /** スマホ対応フラグ（1: 対応、0: 非対応） */
  sp_flag: number;
}

/**
 * シリーズ情報
 */
export interface ItemSeries {
  /** シリーズ名 */
  name: string;
  /** シリーズID */
  id: number;
}

/**
 * サイズ情報
 */
export interface ItemSize {
  /** サイズ名 */
  name: string;
  /** サイズID */
  id: number;
}

/**
 * 立ち読み情報
 */
export interface ItemTachiyomi {
  /** 立ち読みページURL */
  URL: string;
  /** 立ち読みアフィリエイトリンクURL */
  affilaiteURL: string;
}

/**
 * タイプ情報
 */
export interface ItemType {
  /** タイプ名 */
  name: string;
  /** タイプID */
  id: number;
}

/**
 * メーカー情報
 */
export interface MakerMaker {
  /** メーカーID */
  maker_id: number;
  /** メーカー名 */
  name: string;
  /** メーカー名（読み仮名） */
  ruby: string;
  /** リストページURL（アフィリエイトID付き） */
  list_url: string;
}

/**
 * メーカー検索レスポンス
 */
export interface MakerMakerSearchResponse {
  /** ステータスコード */
  status: number;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** サイト名 */
  site_name: string;
  /** サイトコード */
  site_code: string;
  /** サービス名 */
  service_name: string;
  /** サービスコード */
  service_code: string;
  /** フロアID */
  floor_id: number;
  /** フロア名 */
  floor_name: string;
  /** フロアコード */
  floor_code: string;
  /** メーカー情報リスト */
  maker: MakerMaker[];
}

/**
 * シリーズ情報
 */
export interface SeriesSeries {
  /** シリーズID */
  series_id: number;
  /** シリーズ名 */
  name: string;
  /** シリーズ名（読み仮名） */
  ruby: string;
  /** リストページURL（アフィリエイトID付き） */
  list_url: string;
}

/**
 * シリーズ検索レスポンス
 */
export interface SeriesSeriesSearchResponse {
  /** ステータスコード */
  status: number;
  /** 取得件数 */
  result_count: number;
  /** 全体件数 */
  total_count: number;
  /** 検索開始位置 */
  first_position: number;
  /** サイト名 */
  site_name: string;
  /** サイトコード */
  site_code: string;
  /** サービス名 */
  service_name: string;
  /** サービスコード */
  service_code: string;
  /** フロアID */
  floor_id: number;
  /** フロア名 */
  floor_name: string;
  /** フロアコード */
  floor_code: string;
  /** シリーズ情報リスト */
  series: SeriesSeries[];
}

export type ActressSearchParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * 頭文字（50音をUTF-8で指定）
 */
initial?: string;
/**
 * 女優ID
 */
actress_id?: number;
/**
 * 検索キーワード（UTF-8で指定）
 */
keyword?: string;
/**
 * バスト下限（cm）
 */
gte_bust?: number;
/**
 * バスト上限（cm）
 */
lte_bust?: number;
/**
 * ウエスト下限（cm）
 */
gte_waist?: number;
/**
 * ウエスト上限（cm）
 */
lte_waist?: number;
/**
 * ヒップ下限（cm）
 */
gte_hip?: number;
/**
 * ヒップ上限（cm）
 */
lte_hip?: number;
/**
 * 身長下限（cm）
 */
gte_height?: number;
/**
 * 身長上限（cm）
 */
lte_height?: number;
/**
 * 生年月日下限（yyyy-mm-dd形式）
 */
gte_birthday?: string;
/**
 * 生年月日上限（yyyy-mm-dd形式）
 */
lte_birthday?: string;
/**
 * 取得件数（初期値：20、最大：100）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1）
 */
offset?: number;
/**
 * ソート順
 */
sort?: ActressSearchSort;
/**
 * 出力形式
 */
output?: ActressSearchOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type ActressSearchSort = typeof ActressSearchSort[keyof typeof ActressSearchSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActressSearchSort = {
  name: 'name',
  '-name': '-name',
  bust: 'bust',
  '-bust': '-bust',
  waist: 'waist',
  '-waist': '-waist',
  hip: 'hip',
  '-hip': '-hip',
  height: 'height',
  '-height': '-height',
  birthday: 'birthday',
  '-birthday': '-birthday',
  id: 'id',
  '-id': '-id',
} as const;

export type ActressSearchOutput = typeof ActressSearchOutput[keyof typeof ActressSearchOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ActressSearchOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type ActressSearch200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  initial?: string;
  actress_id?: number;
  keyword?: string;
  gte_bust?: number;
  lte_bust?: number;
  gte_waist?: number;
  lte_waist?: number;
  gte_hip?: number;
  lte_hip?: number;
  gte_height?: number;
  lte_height?: number;
  gte_birthday?: string;
  lte_birthday?: string;
  hits?: number;
  offset?: number;
  sort?: string;
  output?: string;
  callback?: string;
};

export type ActressSearch200Request = {
  parameters: ActressSearch200RequestParameters;
};

export type ActressSearch200 = {
  request: ActressSearch200Request;
  result: ActressActressSearchResponse;
};

export type AuthorSearchParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * フロア検索APIから取得可能なフロアID
 */
floor_id: number;
/**
 * 読み仮名（作者名読み仮名をUTF-8で指定、前方一致検索）
 */
initial?: string;
/**
 * 取得件数（初期値：100、最大：500）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1）
 */
offset?: number;
/**
 * 出力形式
 */
output?: AuthorSearchOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type AuthorSearchOutput = typeof AuthorSearchOutput[keyof typeof AuthorSearchOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AuthorSearchOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type AuthorSearch200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  floor_id: number;
  initial?: string;
  hits?: number;
  offset?: number;
  output?: string;
  callback?: string;
};

export type AuthorSearch200Request = {
  parameters: AuthorSearch200RequestParameters;
};

export type AuthorSearch200 = {
  request: AuthorSearch200Request;
  result: AuthorAuthorSearchResponse;
};

export type FloorListParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * 出力形式
 */
output?: FloorListOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type FloorListOutput = typeof FloorListOutput[keyof typeof FloorListOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const FloorListOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type FloorList200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  output?: string;
  callback?: string;
};

export type FloorList200Request = {
  parameters: FloorList200RequestParameters;
};

export type FloorList200 = {
  request: FloorList200Request;
  result: FloorFloorListResponse;
};

export type GenreSearchParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * フロア検索APIから取得可能なフロアID
 */
floor_id: number;
/**
 * 頭文字（50音をUTF-8で指定）
 */
initial?: string;
/**
 * 取得件数（初期値：100、最大：500）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1）
 */
offset?: number;
/**
 * 出力形式
 */
output?: GenreSearchOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type GenreSearchOutput = typeof GenreSearchOutput[keyof typeof GenreSearchOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GenreSearchOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type GenreSearch200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  floor_id: number;
  initial?: string;
  hits?: number;
  offset?: number;
  output?: string;
  callback?: string;
};

export type GenreSearch200Request = {
  parameters: GenreSearch200RequestParameters;
};

export type GenreSearch200 = {
  request: GenreSearch200Request;
  result: GenreGenreSearchResponse;
};

export type ItemListParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * 一般（DMM.com）かアダルト（FANZA）かを指定
 */
site: ItemListSite;
/**
 * フロアAPIから取得できるサービスコードを指定
 */
service?: string;
/**
 * フロアAPIから取得できるフロアコードを指定
 */
floor?: string;
/**
 * 取得件数（初期値：20、最大：100）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1、最大：50000）
 */
offset?: number;
/**
 * ソート順（初期値：rank）
 */
sort?: ItemListSort;
/**
 * 検索キーワード（UTF-8で指定）
 */
keyword?: string;
/**
 * 商品に振られているcontent_id
 */
cid?: string;
/**
 * 絞り込み項目（女優：actress、作者：author、ジャンル：genre、シリーズ：series、メーカー：maker）
 */
article?: ItemListArticleItem[];
/**
 * 絞り込み項目のID（各検索APIから取得可能）
 */
article_id?: string[];
/**
 * このパラメータで指定した日付以降に発売された商品を絞り込み（ISO8601形式）
 */
gte_date?: string;
/**
 * このパラメータで指定した日付以前に発売された商品を絞り込み（ISO8601形式）
 */
lte_date?: string;
/**
 * 在庫絞り込み（通販サービスのみ指定可能）
 */
mono_stock?: ItemListMonoStock;
/**
 * 出力形式
 */
output?: ItemListOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type ItemListSite = typeof ItemListSite[keyof typeof ItemListSite];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemListSite = {
  DMMcom: 'DMM.com',
  FANZA: 'FANZA',
} as const;

export type ItemListSort = typeof ItemListSort[keyof typeof ItemListSort];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemListSort = {
  rank: 'rank',
  price: 'price',
  '-price': '-price',
  date: 'date',
  review: 'review',
  match: 'match',
} as const;

export type ItemListArticleItem = typeof ItemListArticleItem[keyof typeof ItemListArticleItem];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemListArticleItem = {
  actress: 'actress',
  author: 'author',
  genre: 'genre',
  series: 'series',
  maker: 'maker',
} as const;

export type ItemListMonoStock = typeof ItemListMonoStock[keyof typeof ItemListMonoStock];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemListMonoStock = {
  stock: 'stock',
  reserve: 'reserve',
  reserve_empty: 'reserve_empty',
  mono: 'mono',
  dmp: 'dmp',
} as const;

export type ItemListOutput = typeof ItemListOutput[keyof typeof ItemListOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ItemListOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type ItemList200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  site: string;
  service?: string;
  floor?: string;
  hits?: number;
  offset?: number;
  sort?: string;
  keyword?: string;
  cid?: string;
  article?: string[];
  article_id?: string[];
  gte_date?: string;
  lte_date?: string;
  mono_stock?: string;
  output?: string;
  callback?: string;
};

export type ItemList200Request = {
  parameters: ItemList200RequestParameters;
};

export type ItemList200 = {
  request: ItemList200Request;
  result: ItemItemListResult;
};

export type MakerSearchParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * フロア検索APIから取得可能なフロアID
 */
floor_id: number;
/**
 * 頭文字（50音をUTF-8で指定）
 */
initial?: string;
/**
 * 取得件数（初期値：100、最大：500）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1）
 */
offset?: number;
/**
 * 出力形式
 */
output?: MakerSearchOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type MakerSearchOutput = typeof MakerSearchOutput[keyof typeof MakerSearchOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MakerSearchOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type MakerSearch200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  floor_id: number;
  initial?: string;
  hits?: number;
  offset?: number;
  output?: string;
  callback?: string;
};

export type MakerSearch200Request = {
  parameters: MakerSearch200RequestParameters;
};

export type MakerSearch200 = {
  request: MakerSearch200Request;
  result: MakerMakerSearchResponse;
};

export type SeriesSearchParams = {
/**
 * 登録時に割り振られたAPIID
 */
api_id: string;
/**
 * 登録時に割り振られた990～999までのアフィリエイトID
 */
affiliate_id: string;
/**
 * フロア検索APIから取得可能なフロアID
 */
floor_id: number;
/**
 * 頭文字（50音をUTF-8で指定）
 */
initial?: string;
/**
 * 取得件数（初期値：100、最大：500）
 */
hits?: number;
/**
 * 検索開始位置（初期値：1）
 */
offset?: number;
/**
 * 出力形式
 */
output?: SeriesSearchOutput;
/**
 * JSONP形式で出力する場合のコールバック関数名
 */
callback?: string;
};

export type SeriesSearchOutput = typeof SeriesSearchOutput[keyof typeof SeriesSearchOutput];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const SeriesSearchOutput = {
  json: 'json',
  xml: 'xml',
} as const;

export type SeriesSearch200RequestParameters = {
  /** リクエストパラメータ */
  api_id: string;
  affiliate_id: string;
  floor_id: number;
  initial?: string;
  hits?: number;
  offset?: number;
  output?: string;
  callback?: string;
};

export type SeriesSearch200Request = {
  parameters: SeriesSearch200RequestParameters;
};

export type SeriesSearch200 = {
  request: SeriesSearch200Request;
  result: SeriesSeriesSearchResponse;
};

/**
 * DMM女優情報を検索するAPI。名前、身体的特徴、生年月日等で絞り込み検索が可能です。
 * @summary 女優検索API
 */
export type actressSearchResponse200 = {
  data: ActressSearch200
  status: 200
}

export type actressSearchResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type actressSearchResponseComposite = actressSearchResponse200 | actressSearchResponse400;
    
export type actressSearchResponse = actressSearchResponseComposite & {
  headers: Headers;
}

export const getActressSearchUrl = (params: ActressSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/ActressSearch?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/ActressSearch`
}

export const actressSearch = async (params: ActressSearchParams, options?: RequestInit): Promise<actressSearchResponse> => {
  
  const res = await fetch(getActressSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: actressSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as actressSearchResponse
}



/**
 * DMM商品の作者情報を検索するAPI。フロア別の作者一覧を取得できます。
 * @summary 作者検索API
 */
export type authorSearchResponse200 = {
  data: AuthorSearch200
  status: 200
}

export type authorSearchResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type authorSearchResponseComposite = authorSearchResponse200 | authorSearchResponse400;
    
export type authorSearchResponse = authorSearchResponseComposite & {
  headers: Headers;
}

export const getAuthorSearchUrl = (params: AuthorSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/AuthorSearch?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/AuthorSearch`
}

export const authorSearch = async (params: AuthorSearchParams, options?: RequestInit): Promise<authorSearchResponse> => {
  
  const res = await fetch(getAuthorSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: authorSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as authorSearchResponse
}



/**
 * DMM APIで利用可能なサイト、サービス、フロア情報を取得するAPI。商品検索時のパラメータ指定に使用します。
 * @summary フロア情報API
 */
export type floorListResponse200 = {
  data: FloorList200
  status: 200
}

export type floorListResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type floorListResponseComposite = floorListResponse200 | floorListResponse400;
    
export type floorListResponse = floorListResponseComposite & {
  headers: Headers;
}

export const getFloorListUrl = (params: FloorListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/FloorList?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/FloorList`
}

export const floorList = async (params: FloorListParams, options?: RequestInit): Promise<floorListResponse> => {
  
  const res = await fetch(getFloorListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: floorListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as floorListResponse
}



/**
 * DMM商品のジャンル情報を検索するAPI。フロア別のジャンル一覧を取得できます。
 * @summary ジャンル検索API
 */
export type genreSearchResponse200 = {
  data: GenreSearch200
  status: 200
}

export type genreSearchResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type genreSearchResponseComposite = genreSearchResponse200 | genreSearchResponse400;
    
export type genreSearchResponse = genreSearchResponseComposite & {
  headers: Headers;
}

export const getGenreSearchUrl = (params: GenreSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/GenreSearch?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/GenreSearch`
}

export const genreSearch = async (params: GenreSearchParams, options?: RequestInit): Promise<genreSearchResponse> => {
  
  const res = await fetch(getGenreSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: genreSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as genreSearchResponse
}



/**
 * DMM商品情報を取得するAPI。キーワード検索、カテゴリ絞り込み、ソート機能を提供します。
 * @summary 商品情報API
 */
export type itemListResponse200 = {
  data: ItemList200
  status: 200
}

export type itemListResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type itemListResponseComposite = itemListResponse200 | itemListResponse400;
    
export type itemListResponse = itemListResponseComposite & {
  headers: Headers;
}

export const getItemListUrl = (params: ItemListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/ItemList?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/ItemList`
}

export const itemList = async (params: ItemListParams, options?: RequestInit): Promise<itemListResponse> => {
  
  const res = await fetch(getItemListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: itemListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as itemListResponse
}



/**
 * DMM商品のメーカー情報を検索するAPI。フロア別のメーカー一覧を取得できます。
 * @summary メーカー検索API
 */
export type makerSearchResponse200 = {
  data: MakerSearch200
  status: 200
}

export type makerSearchResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type makerSearchResponseComposite = makerSearchResponse200 | makerSearchResponse400;
    
export type makerSearchResponse = makerSearchResponseComposite & {
  headers: Headers;
}

export const getMakerSearchUrl = (params: MakerSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/MakerSearch?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/MakerSearch`
}

export const makerSearch = async (params: MakerSearchParams, options?: RequestInit): Promise<makerSearchResponse> => {
  
  const res = await fetch(getMakerSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: makerSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as makerSearchResponse
}



/**
 * DMM商品のシリーズ情報を検索するAPI。フロア別のシリーズ一覧を取得できます。
 * @summary シリーズ検索API
 */
export type seriesSearchResponse200 = {
  data: SeriesSearch200
  status: 200
}

export type seriesSearchResponse400 = {
  data: ErrorResponseBody
  status: 400
}
    
export type seriesSearchResponseComposite = seriesSearchResponse200 | seriesSearchResponse400;
    
export type seriesSearchResponse = seriesSearchResponseComposite & {
  headers: Headers;
}

export const getSeriesSearchUrl = (params: SeriesSearchParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0 ? `https://api.dmm.com/affiliate/v3/SeriesSearch?${stringifiedParams}` : `https://api.dmm.com/affiliate/v3/SeriesSearch`
}

export const seriesSearch = async (params: SeriesSearchParams, options?: RequestInit): Promise<seriesSearchResponse> => {
  
  const res = await fetch(getSeriesSearchUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: seriesSearchResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as seriesSearchResponse
}
